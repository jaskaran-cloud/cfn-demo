AWSTemplateFormatVersion: '2010-09-09'
Description: This template will grow and grow untill it becomes perfect
Parameters:
  EnvSize:
    Type: String
    Default: S
    AllowedValues:
      - S
      - M
      - L
    Description: Select Environment Size(S,M,L)
  PublicAccess:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
Mappings:
  RegionMap:
    us-west-1:
      "INSTANCEAMIID" : "ami-de347abe"
    us-west-2:
      "INSTANCEAMIID" : "ami-b04e92d0"
  InstanceSize:
    S:
      "EC2WebServer" : "t2.micro"
    M:
      "EC2WebServer" : "t2.small"
    L:
      "EC2WebServer" : "t2.medium"
Conditions:
  isPublic:
    !Equals [!Ref PublicAccess, "true"]
  isntPublic:
    !Not [!Equals [!Ref PublicAccess, "true"]]
Resources:
  VPCDemo:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: "10.0.0.0/16"
  IGW:
    Type: "AWS::EC2::InternetGateway"
  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPCDemo
  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPCDemo
  RouteDefaultPublic:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic
  SubnetDemo:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref VPCDemo
      MapPublicIpOnLaunch: true
  SubnetRouteTableAssociatePublicA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetDemo
  SGSsh:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Join ["", ["Stack ", !Ref "AWS::StackId", " SSH Security Group"]]
      VpcId: !Ref VPCDemo
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "22"
          FromPort: "22"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"
  SGPublicHttp:
    Type: "AWS::EC2::SecurityGroup"
    Condition: isPublic
    Properties:
      GroupDescription: !Join ["", ["Stack ", !Ref "AWS::StackId", " HTTP Security Group"]]
      VpcId: !Ref VPCDemo
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"
  SGClosedHttp:
    Type: "AWS::EC2::SecurityGroup"
    Condition: isntPublic
    Properties:
      GroupDescription: !Join ["", ["Stack ", !Ref "AWS::StackId", " HTTP Security Group"]]
      VpcId: !Ref VPCDemo
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          ToPort: "80"
          FromPort: "80"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          ToPort: "-1"
          IpProtocol: "-1"
  EC2WebServer:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", INSTANCEAMIID ]
      InstanceType: !FindInMap [ InstanceSize, !Ref EnvSize, EC2WebServer ]
      AvailabilityZone: !Select [0, !GetAZs ]
      SecurityGroupIds: 
        - !Ref SGSsh
        - !If [isPublic, !Ref SGPublicHttp, !Ref SGClosedHttp]
      SubnetId: !Ref SubnetDemo
      KeyName: cfndemokey
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            sudo yum install httpd -y
            sudo yum update -y
            chkconfig httpd on
            service httpd start
            cd /var/www/html
            curl -o index.html http://cfn-demo-bkt-jas.s3-website-us-west-2.amazonaws.com/
